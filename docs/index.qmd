---
title: "webR/WebAssembly hubverse dataviz Demo"
engine: knitr
author: 'Anna K'
date: 'today'
format: 
  html:
    toc: true
    toc-title: "webR/WebAssembly hubverse dataviz Demo"
    code-links:
      - text: GitHub
        icon: github
        href: https://github.com/r-rse/FluSight-forecast-hub
    theme: 
      light: cosmo
      dark: darkly
webr: 
  packages: ['ggplot2', 'dplyr', 'duckdb', 'dbplyr']
  channel-type: "automatic"
filters: 
  - webr
---


## Example of Running Code


```{webr-r}
mtcars |> 
  filter(mpg > 30)
```

```{webr-r}
mtcars |> 
  ggplot(aes(x = mpg, y = wt)) +
  geom_point()
```

# Hubverse Data

## Download duckdb database

```{webr-r}
data_dir <- tempdir()
db_file <- file.path(data_dir, "cdcepi-flusight-forecast-hub.db")

system.time(
download.file(
  "https://raw.githubusercontent.com/reichlab/duck-hub/main/data/cdcepi-flusight-forecast-hub.db", 
  destfile = db_file)
)
```


## Connect to duckdb database

```{webr-r}
library("duckdb")
con <- dbConnect(duckdb::duckdb(), db_file)
```

## Filter data

```{webr-r}
library(dplyr)
tbl(con, "model_output") |>
  filter(output_type == "quantile")
```



## Hide all setup

We can use `#| context: setup` to execute hidden setup code on load, e.g. below I'm download the database file creating a connection to it and assigning the `model_output` table to an object called `hub_con`.

This is then available to run visible interactive queries against.


```{webr-r}
#| context: setup
data_dir <- tempdir()
db_file <- file.path(data_dir, "cdcepi-flusight-forecast-hub.db")

system.time(
download.file(
  "https://raw.githubusercontent.com/reichlab/duck-hub/main/data/cdcepi-flusight-forecast-hub.db", 
  destfile = db_file)
)

library("duckdb")
con <- dbConnect(duckdb::duckdb(), db_file)

library(dplyr)
hub_con <- tbl(con, "model_output") 
```


```{webr-r}
hub_con |>
  filter(output_type == "quantile")
```
